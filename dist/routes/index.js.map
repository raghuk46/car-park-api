{"version":3,"sources":["../../src/routes/index.js"],"names":["Router","routes","registerRoute","createRouteAction","forEach","builder","getRoutes","controllerClass","action","uri","httpMethod","RoutesCollection","addRouteData","boundAction","protectedRoutes","getSecuredRoutes","cacheKey","jwtAuth"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;IAEMA,M;AACJ,kBAAYC,MAAZ,EAAoB;AAAA;;AAClB,SAAKA,MAAL,GAAcA,MAAd;AACD;;;;mCAEcC,a,EAAeC,iB,EAAmB;AAC/C,WAAKF,MAAL,CAAYG,OAAZ,CAAqBC,OAAD,IAAa;AAC/B,cAAMJ,MAAM,GAAGI,OAAO,CAACC,SAAR,EAAf;AACAL,QAAAA,MAAM,CAACG,OAAP,CAAe,CAAC;AAAEG,UAAAA,eAAF;AAAmBC,UAAAA,MAAnB;AAA2BC,UAAAA,GAA3B;AAAgCC,UAAAA;AAAhC,SAAD,KAAkD;AAC/DC,oCAAiBC,YAAjB,CAA8BL,eAA9B,EAA+CC,MAA/C,EAAuD;AACrDC,YAAAA,GADqD;AAErDC,YAAAA;AAFqD,WAAvD;;AAIA,gBAAMG,WAAW,GAAGV,iBAAiB,CAACI,eAAD,EAAkBC,MAAlB,CAArC;AACAN,UAAAA,aAAa,CAACO,GAAD,EAAMC,UAAN,EAAkB,CAACG,WAAD,CAAlB,CAAb;AACD,SAPD,EAF+B,CAW/B;;AACA,cAAMC,eAAe,GAAGT,OAAO,CAACU,gBAAR,EAAxB;AACAD,QAAAA,eAAe,CAACV,OAAhB,CAAwB,CAAC;AAAEG,UAAAA,eAAF;AAAmBC,UAAAA,MAAnB;AAA2BC,UAAAA,GAA3B;AAAgCC,UAAAA,UAAhC;AAA4CM,UAAAA;AAA5C,SAAD,KAA4D;AAClFL,oCAAiBC,YAAjB,CAA8BL,eAA9B,EAA+CC,MAA/C,EAAuD;AACrDC,YAAAA,GADqD;AAErDC,YAAAA;AAFqD,WAAvD;;AAIA,gBAAMG,WAAW,GAAGV,iBAAiB,CAACI,eAAD,EAAkBC,MAAlB,CAArC;AACAN,UAAAA,aAAa,CAACO,GAAD,EAAMC,UAAN,EAAkB,CAACO,aAAD,EAAU,oBAAMD,QAAN,CAAV,EAA2BH,WAA3B,CAAlB,CAAb;AACD,SAPD;AAQD,OArBD;AAsBD;;;;;;eAGYb,M","sourcesContent":["import RoutesCollection from 'utils/routesCollection';\nimport jwtAuth from 'middlewares/auth';\nimport cache from 'middlewares/cache';\n\nclass Router {\n  constructor(routes) {\n    this.routes = routes;\n  }\n\n  registerRoutes(registerRoute, createRouteAction) {\n    this.routes.forEach((builder) => {\n      const routes = builder.getRoutes();\n      routes.forEach(({ controllerClass, action, uri, httpMethod }) => {\n        RoutesCollection.addRouteData(controllerClass, action, {\n          uri,\n          httpMethod,\n        });\n        const boundAction = createRouteAction(controllerClass, action);\n        registerRoute(uri, httpMethod, [boundAction]);\n      });\n\n      // Handling Secured Routes\n      const protectedRoutes = builder.getSecuredRoutes();\n      protectedRoutes.forEach(({ controllerClass, action, uri, httpMethod, cacheKey }) => {\n        RoutesCollection.addRouteData(controllerClass, action, {\n          uri,\n          httpMethod,\n        });\n        const boundAction = createRouteAction(controllerClass, action);\n        registerRoute(uri, httpMethod, [jwtAuth, cache(cacheKey), boundAction]);\n      });\n    });\n  }\n}\n\nexport default Router;\n"],"file":"index.js"}