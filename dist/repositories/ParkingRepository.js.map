{"version":3,"sources":["../../src/repositories/ParkingRepository.js"],"names":["ParkingRepository","db","logger","statsCollection","collection","doc","parkingCollection","redis","snapshot","get","totalSlots","data","set","status","err","error","slots","merge","statusCode","message","updatedSlots","freeSlots","updatedAt","firebase","firestore","FieldValue","serverTimestamp","plateNo","color","type","occupiedSlots","activeSlots","where","empty","docs","push","slot","nearestAvalaibleSlot","occupied","add","enteredAt","active","totalOccupied","length","avaialbeSlots","getAvailablefreeSlots","statsSnapshot","parseInt","limit","id","exitedAt","carInfo","val","keyName","total","console","log","map","BaseRepository"],"mappings":"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","sourcesContent":["import firebase from 'firebase-admin';\n\nimport BaseRepository from 'repositories/BaseRepository';\nimport findNearestAvailable from '/helpers/slotFinder';\n\nclass ParkingRepository extends BaseRepository {\n  constructor(db, logger) {\n    super();\n    this.logger = logger;\n    this.db = db;\n    this.statsCollection = db.collection('parkingStats').doc('stats');\n    this.parkingCollection = db.collection('parkinglot');\n  }\n\n  async getTotalSlots(redis) {\n    try {\n      const snapshot = await this.statsCollection.get();\n      const { totalSlots } = snapshot.data();\n      redis.set('totalSlots', totalSlots);\n      return { status: 'success', totalSlots };\n    } catch (err) {\n      this.logger.error(err);\n    }\n  }\n\n  async updateSlots(slots, redis) {\n    try {\n      await this.statsCollection.set(\n        {\n          totalSlots: slots,\n        },\n        { merge: true },\n      );\n      redis.set('totalSlots', slots);\n      return {\n        status: 'success',\n        totalSlots: slots,\n        statusCode: 200,\n        message: 'Slots Updated Successfully',\n      };\n    } catch (err) {\n      this.logger.error(err);\n    }\n  }\n\n  async getAvailablefreeSlots(redis, updatedSlots = null) {\n    try {\n      if (updatedSlots !== null) {\n        await this.statsCollection.set(\n          { freeSlots: updatedSlots, updatedAt: firebase.firestore.FieldValue.serverTimestamp() },\n          { merge: true },\n        );\n      }\n\n      const snapshot = await this.statsCollection.get();\n      const { freeSlots } = snapshot.data();\n      redis.set('freeSlots', freeSlots);\n      return { status: 'success', freeSlots };\n    } catch (err) {\n      this.logger.error(err);\n    }\n  }\n\n  async parkCar(data, redis) {\n    try {\n      const { plateNo, color, type } = data;\n      const snapshot = await this.statsCollection.get();\n      const { totalSlots, freeSlots } = snapshot.data();\n      let occupiedSlots = [];\n\n      if (freeSlots === 0) {\n        return { status: 'success', message: 'Plarking Lot full' };\n      }\n\n      const activeSlots = await this.parkingCollection.where('active', '==', true).get();\n\n      if (!activeSlots.empty) {\n        for (const doc of activeSlots.docs) {\n          occupiedSlots.push(doc.data().slot);\n        }\n      }\n\n      const nearestAvalaibleSlot = findNearestAvailable({ occupied: occupiedSlots, totalSlots });\n\n      // let`s add the car record and update the freeSlots\n      await this.parkingCollection.add({\n        plateNo: plateNo,\n        color: color,\n        type: type,\n        slot: nearestAvalaibleSlot,\n        enteredAt: firebase.firestore.FieldValue.serverTimestamp(),\n        active: true,\n      });\n\n      // let`s update the freeSlots coun`t\n      const totalOccupied = occupiedSlots.length + 1;\n      const avaialbeSlots = totalSlots - totalOccupied;\n\n      // let`s reuse the above method to update the stats\n      this.getAvailablefreeSlots(redis, avaialbeSlots);\n\n      return {\n        statusCode: 200,\n        status: 'success',\n        message: 'Please park in alloted slot',\n        slot: nearestAvalaibleSlot,\n      };\n    } catch (err) {\n      this.logger.error(err);\n    }\n  }\n\n  async unparkCar(slot, redis) {\n    try {\n      const statsSnapshot = await this.statsCollection.get();\n      const snapshot = await this.parkingCollection\n        .where('slot', '==', parseInt(slot))\n        .where('active', '==', true)\n        .limit(1)\n        .get();\n\n      if (snapshot.empty) {\n        return { status: 'success', message: 'inValid Slot Provided' };\n      }\n\n      for (const doc of snapshot.docs) {\n        const { plateNo, color, type } = doc.data();\n        await this.parkingCollection\n          .doc(doc.id)\n          .set(\n            { active: false, exitedAt: firebase.firestore.FieldValue.serverTimestamp() },\n            { merge: true },\n          );\n        const { freeSlots } = statsSnapshot.data();\n        const avaialbeSlots = freeSlots + 1;\n        this.getAvailablefreeSlots(redis, avaialbeSlots);\n        return {\n          status: 'success',\n          message: 'unparking Successful',\n          carInfo: { plateNo, color, type },\n        };\n      }\n    } catch (err) {\n      this.logger.error(err);\n    }\n  }\n\n  async getAllByType(val, keyName) {\n    try {\n      const snapshot = await this.parkingCollection\n        .where(`${keyName}`, '==', val)\n        .where('active', '==', true)\n        .get();\n\n      if (snapshot.empty) {\n        return { status: 'success', total: 0, message: 'No Records found' };\n      }\n\n      console.log();\n\n      const total = snapshot.docs.length;\n      const data = snapshot.docs.map((doc) => {\n        return { id: doc.id, ...doc.data() };\n      });\n\n      return { status: 'success', total, data };\n    } catch (err) {\n      this.logger.error(err);\n    }\n  }\n}\n\nexport default ParkingRepository;\n"],"file":"ParkingRepository.js"}