{"version":3,"sources":["../../src/repositories/UserRepository.js"],"names":["UserRepository","db","logger","usersCollection","collection","data","username","password","userSnapshot","where","limit","get","empty","statusCode","message","paswordHash","add","err","error","doc","docs","comparePass","token","jwt","sign","uuid","id","process","env","JWT_SECRET","expiresIn","userId","status","userData","BaseRepository"],"mappings":"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","sourcesContent":["import { hashSync, compareSync } from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\n\nimport BaseRepository from 'repositories/BaseRepository';\n\nclass UserRepository extends BaseRepository {\n  constructor(db, logger) {\n    super();\n    this.logger = logger;\n    this.db = db;\n    this.usersCollection = db.collection('users');\n  }\n\n  async createUser(data) {\n    try {\n      const { username, password } = data;\n\n      const userSnapshot = await this.usersCollection\n        .where('username', '==', username)\n        .limit(1)\n        .get();\n\n      if (!userSnapshot.empty) {\n        return { statusCode: 200, message: 'User already Exists' };\n      }\n\n      const paswordHash = hashSync(password, 10);\n      await this.usersCollection.add({ username, password: paswordHash });\n      return { statusCode: 201, message: 'User Created Successfully' };\n    } catch (err) {\n      this.logger.error(err);\n    }\n  }\n\n  async authenticate(data) {\n    try {\n      const { username, password } = data;\n      const userSnapshot = await this.usersCollection.where('username', '==', username).get();\n\n      if (userSnapshot.empty) {\n        return { statusCode: 200, message: 'User Not Found' };\n      }\n\n      for (const doc of userSnapshot.docs) {\n        const comparePass = compareSync(password, doc.data().password);\n        if (!comparePass) {\n          return { statusCode: 200, message: 'username / password incorrect!' };\n        }\n\n        const token = jwt.sign({ uuid: doc.id }, process.env.JWT_SECRET, { expiresIn: '1800s' });\n        return { statusCode: 200, message: 'success', token };\n      }\n    } catch (err) {\n      this.logger.error(err);\n    }\n  }\n\n  async getById(userId) {\n    try {\n      const userSnapshot = await this.usersCollection.doc(userId).get();\n\n      if (userSnapshot.empty) {\n        return { status: 'error', message: 'user not found', userData: {} };\n      }\n\n      const { username } = userSnapshot.data();\n\n      return { status: 'success', userData: { username } };\n    } catch (err) {\n      this.logger.error(err);\n    }\n  }\n}\n\nexport default UserRepository;\n"],"file":"UserRepository.js"}