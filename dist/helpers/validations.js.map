{"version":3,"sources":["../../src/helpers/validations.js"],"names":["registrationSchema","Joi","object","options","abortEarly","keys","username","string","regex","required","messages","password","confirm_password","ref","authSchema","totalSlotsSchema","totalSlots","number","integer","min","parkingSchema","plateNo","color","type","unparkSchema","slotId","typeSchema","plateNoSchema"],"mappings":"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","sourcesContent":["import Joi from 'joi';\n\nconst registrationSchema = Joi.object()\n  .options({ abortEarly: false })\n  .keys({\n    username: Joi.string()\n      .regex(/^[a-zA-Z0-9]{3,15}$/)\n      .required()\n      .messages({\n        'string.base': `username should contain`,\n        'string.empty': `username cannot be an empty`,\n        'string.pattern.base': `username must be atleast 3 char long`,\n      }),\n    password: Joi.string()\n      .required()\n      .regex(/^[a-zA-Z0-9@#]{8,16}$/)\n      .messages({\n        'string.empty': `password cannot be an empty`,\n        'string.pattern.base': `password must be between 8-16 char long`,\n      }),\n    confirm_password: Joi.ref('password'),\n  });\n\nconst authSchema = Joi.object()\n  .options({ abortEarly: false })\n  .keys({\n    username: Joi.string().required().messages({\n      'string.empty': 'username cannot be an empty',\n      'any.required': 'username is required',\n    }),\n    password: Joi.string().required().messages({\n      'string.empty': 'password cannot be an empty',\n      'any.required': 'password is required',\n    }),\n  });\n\nconst totalSlotsSchema = Joi.object()\n  .options({ abortEarly: false })\n  .keys({\n    totalSlots: Joi.number().integer().min(1).required().messages({\n      'number.base': `totalSlots must be a number`,\n      'number.min': 'totlaSlots must be greater than or equal to 1',\n    }),\n  });\n\nconst parkingSchema = Joi.object()\n  .options({ abortEarly: false })\n  .keys({\n    plateNo: Joi.string()\n      .regex(/^[a-zA-Z0-9 ]{5,8}$/)\n      .required()\n      .messages({\n        'string.empty': `plate No cannot be an empty`,\n        'string.pattern.base': `plate No must be in between 5-8 char long`,\n      }),\n    color: Joi.string().required().messages({\n      'string.empty': `car color cannot be an empty`,\n    }),\n    type: Joi.string().required().messages({\n      'string.empty': `car type cannot be an empty`,\n    }),\n  });\n\nconst unparkSchema = Joi.object()\n  .options({ abortEarly: false })\n  .keys({\n    slotId: Joi.number().integer().min(1).required().messages({\n      'number.base': `slotId must be a number`,\n      'number.min': 'slotId must be greater than or equal to 1',\n    }),\n  });\n\nconst typeSchema = Joi.object()\n  .options({ abortEarly: false })\n  .keys({\n    type: Joi.string().required().messages({\n      'string.empty': `car type cannot be an empty`,\n    }),\n  });\n\nconst plateNoSchema = Joi.object()\n  .options({ abortEarly: false })\n  .keys({\n    plateNo: Joi.string()\n      .regex(/^[a-zA-Z0-9 ]{5,8}$/)\n      .required()\n      .messages({\n        'string.empty': `plate No cannot be an empty`,\n        'string.pattern.base': `plate No must be in between 5-8 char long`,\n      }),\n  });\n\nexport {\n  registrationSchema,\n  authSchema,\n  totalSlotsSchema,\n  parkingSchema,\n  unparkSchema,\n  typeSchema,\n  plateNoSchema,\n};\n"],"file":"validations.js"}