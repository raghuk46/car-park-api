{"version":3,"sources":["../../src/middlewares/auth.js"],"names":["module","exports","req","res","next","token","headers","authorization","status","send","statusCode","message","extractTokenHash","split","uuid","jwt","verify","process","env","JWT_SECRET","undefined","userId","err","name"],"mappings":";;AAAA;;;;AAEAA,MAAM,CAACC,OAAP,GAAiB,gBAAgBC,GAAhB,EAAqBC,GAArB,EAA0BC,IAA1B,EAAgC;AAC/C,MAAI;AACF,UAAMC,KAAK,GAAGH,GAAG,CAACI,OAAJ,CAAY,gBAAZ,KAAiCJ,GAAG,CAACI,OAAJ,CAAYC,aAA3D;AAEA,QAAI,CAACF,KAAL,EACE,OAAOF,GAAG,CACPK,MADI,CACG,GADH,EAEJC,IAFI,CAEC;AAAEC,MAAAA,UAAU,EAAE,GAAd;AAAmBF,MAAAA,MAAM,EAAE,QAA3B;AAAqCG,MAAAA,OAAO,EAAE;AAA9C,KAFD,CAAP;AAGF,UAAMC,gBAAgB,GAAGP,KAAK,CAACQ,KAAN,CAAY,GAAZ,CAAzB;;AAEA,QAAID,gBAAgB,CAAC,CAAD,CAAhB,KAAwB,QAA5B,EAAsC;AACpCT,MAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEE,QAAAA,OAAO,EAAE;AAAX,OAArB;AACD;;AAED,UAAM;AAAEG,MAAAA;AAAF,QAAWC,sBAAIC,MAAJ,CAAWJ,gBAAgB,CAAC,CAAD,CAA3B,EAAgCK,OAAO,CAACC,GAAR,CAAYC,UAA5C,CAAjB;;AAEA,QAAIL,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAKM,SAA9B,EAAyC;AACvCjB,MAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEE,QAAAA,OAAO,EAAE;AAAX,OAArB;AACD;;AAEDT,IAAAA,GAAG,CAACmB,MAAJ,GAAaP,IAAb;AACAV,IAAAA,IAAI;AACL,GArBD,CAqBE,OAAOkB,GAAP,EAAY;AACZ,QAAIA,GAAG,CAACC,IAAJ,KAAa,mBAAjB,EAAsC;AACpCpB,MAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,UAAU,EAAE,GAAd;AAAmBF,QAAAA,MAAM,EAAE,SAA3B;AAAsCG,QAAAA,OAAO,EAAE;AAA/C,OAArB;AACD;AACF;AACF,CA3BD","sourcesContent":["import jwt from 'jsonwebtoken';\n\nmodule.exports = async function (req, res, next) {\n  try {\n    const token = req.headers['x-access-token'] || req.headers.authorization;\n\n    if (!token)\n      return res\n        .status(401)\n        .send({ statusCode: 401, status: 'failed', message: 'UnAuthorized. Token Not Specified' });\n    const extractTokenHash = token.split(' ');\n\n    if (extractTokenHash[0] !== 'Bearer') {\n      res.status(400).send({ message: 'Invalid token.' });\n    }\n\n    const { uuid } = jwt.verify(extractTokenHash[1], process.env.JWT_SECRET);\n\n    if (uuid === null || uuid === undefined) {\n      res.status(400).send({ message: 'Invalid token.' });\n    }\n\n    req.userId = uuid;\n    next();\n  } catch (err) {\n    if (err.name === 'TokenExpiredError') {\n      res.status(401).send({ statusCode: 401, status: 'success', message: 'Session Expired' });\n    }\n  }\n};\n"],"file":"auth.js"}