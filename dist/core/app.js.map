{"version":3,"sources":["../../src/core/app.js"],"names":["App","router","repository","express","port","process","env","PORT","environment","NODE_ENV","host","expressRouter","Router","logger","uri","httpMethod","boundAction","route","use","bodyParser","json","urlencoded","extended","httpLogger","errorHandler","registerMiddlewares","req","res","send","message","listen","log","tags","Boot"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEMA,G;;;;;AACJ,eAAYC,MAAZ,EAAoBC,UAApB,EAAgC;AAAA;;AAAA;;AAC9B,8BAAMD,MAAN,EAAcC,UAAd;AACA,UAAKC,OAAL,GAAe,uBAAf;AACA,UAAKC,IAAL,GAAYC,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoB,IAAhC;AACA,UAAKC,WAAL,GAAmBH,OAAO,CAACC,GAAR,CAAYG,QAAZ,IAAwB,YAA3C;AACA,UAAKC,IAAL,GAAY,WAAZ;AACA,UAAKC,aAAL,GAAqBR,iBAAQS,MAAR,EAArB;AACA,UAAKC,MAAL,GAAcA,eAAd;AAP8B;AAQ/B;;;;qCAEgBC,G,EAAKC,U,EAAYC,W,EAAa;AAC7C,WAAKL,aAAL,CAAmBM,KAAnB,CAAyBH,GAAzB,EAA8BC,UAA9B,EAA0CC,WAA1C;AACD;;;0CAEqB;AACpB,WAAKb,OAAL,CAAae,GAAb,CAAiB,2BAAjB;AACA,WAAKf,OAAL,CAAae,GAAb,CAAiBC,oBAAWC,IAAX,EAAjB;AACA,WAAKjB,OAAL,CAAae,GAAb,CAAiB,oBAAjB;AACA,WAAKf,OAAL,CAAae,GAAb,CAAiB,sBAAjB;AACA,WAAKf,OAAL,CAAae,GAAb,CAAiBC,oBAAWE,UAAX,CAAsB;AAAEC,QAAAA,QAAQ,EAAE;AAAZ,OAAtB,CAAjB;AACA,WAAKnB,OAAL,CAAae,GAAb,CAAiBK,mBAAjB;AACA,WAAKpB,OAAL,CAAae,GAAb,CAAiBM,qBAAjB;AACD;;;0BAEK;AACJ;;AACA,WAAKC,mBAAL;AAEA,WAAKtB,OAAL,CAAae,GAAb,CAAiB,GAAjB,EAAsB,KAAKP,aAA3B;AACA,WAAKR,OAAL,CAAae,GAAb,CAAiB,GAAjB,EAAsB,CAACQ,GAAD,EAAMC,GAAN,KAAcA,GAAG,CAACC,IAAJ,CAAS;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAT,CAApC;AACA,WAAK1B,OAAL,CAAa2B,MAAb,CAAoB,KAAK1B,IAAzB,EAA+B,KAAKM,IAApC;;AACAG,sBAAOkB,GAAP,CAAW,MAAX,EAAoB,6BAA4B,KAAKrB,IAAK,IAAG,KAAKN,IAAK,EAAvE,EAA0E;AAAE4B,QAAAA,IAAI,EAAE;AAAR,OAA1E;;AAEA,aAAO,KAAK7B,OAAZ;AACD;;;;EAnCe8B,a;;eAsCHjC,G","sourcesContent":["import express from 'express';\nimport bodyParser from 'body-parser';\nimport compression from 'compression';\nimport cors from 'cors';\nimport helmet from 'helmet';\n\nimport Boot from './boot';\nimport logger from 'utils/logger';\nimport httpLogger from 'middlewares/httpLogger';\nimport errorHandler from 'middlewares/errorHandler';\n\nclass App extends Boot {\n  constructor(router, repository) {\n    super(router, repository);\n    this.express = express();\n    this.port = process.env.PORT || 3000;\n    this.environment = process.env.NODE_ENV || 'production';\n    this.host = 'localhost';\n    this.expressRouter = express.Router();\n    this.logger = logger;\n  }\n\n  appRegisterRoute(uri, httpMethod, boundAction) {\n    this.expressRouter.route(uri)[httpMethod](boundAction);\n  }\n\n  registerMiddlewares() {\n    this.express.use(compression());\n    this.express.use(bodyParser.json());\n    this.express.use(cors());\n    this.express.use(helmet());\n    this.express.use(bodyParser.urlencoded({ extended: true }));\n    this.express.use(httpLogger);\n    this.express.use(errorHandler);\n  }\n\n  run() {\n    super.run();\n    this.registerMiddlewares();\n\n    this.express.use('/', this.expressRouter);\n    this.express.use('/', (req, res) => res.send({ message: 'Not Found' }));\n    this.express.listen(this.port, this.host);\n    logger.log('info', `ðŸš€ Server ready at http://${this.host}:${this.port}`, { tags: 'server' });\n\n    return this.express;\n  }\n}\n\nexport default App;\n"],"file":"app.js"}