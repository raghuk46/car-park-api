{"version":3,"sources":["../../src/core/boot.js"],"names":["Boot","router","repository","logger","constants","appRegisterRoute","bind","appCreateRouteAction","redis","createClient","host","port","process","env","REDIS_PORT","uri","httpMethod","boundAction","Error","controllerClass","method","result","req","res","next","buildControllerInstance","ControllerClass","base","protocol","get","params","query","body","uriGenerator","URIGenerator","send","statusCode","resource","location","status","json","registerRepositories","registerRoutes"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;;;;;;;;;IAEMA,I;AACJ,gBAAYC,MAAZ,EAAoBC,UAApB,EAAgC;AAAA;;AAC9B,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,MAAL,GAAcA,eAAd;AACA,SAAKC,SAAL,GAAiBA,kBAAjB;AACA,SAAKC,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAAxB;AACA,SAAKC,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BD,IAA1B,CAA+B,IAA/B,CAA5B;AACA,SAAKE,KAAL,GAAaA,eAAMC,YAAN,CAAmB;AAAEC,MAAAA,IAAI,EAAE,cAAR;AAAwBC,MAAAA,IAAI,EAAEC,OAAO,CAACC,GAAR,CAAYC,UAAZ,IAA0B;AAAxD,KAAnB,CAAb;AACD;;;;qCAEgBC,G,EAAKC,U,EAAYC,W,EAAa;AAC7C,YAAM,IAAIC,KAAJ,CAAU,2BAAV,CAAN;AACD;;;yCAEoBC,e,EAAiBC,M,EAAQ;AAC5C,YAAMC,MAAM,GAAG,CACb,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AAClB,aAAKC,uBAAL,CAA6BN,eAA7B,EAA8CG,GAA9C,EAAmDC,GAAnD,EAAwDC,IAAxD,EAA8DJ,MAA9D,EAAsEE,GAAtE,EAA2EC,GAA3E,EAAgFC,IAAhF;AACD,OAHY,CAAf;AAMA,aAAOH,MAAP;AACD;;;4CAEuBK,e,EAAiBJ,G,EAAKC,G,EAAKC,I,EAAM;AACvD,aAAO,IAAIE,eAAJ,CAAoB;AACzBC,QAAAA,IAAI,EAAG,GAAEL,GAAG,CAACM,QAAS,MAAKN,GAAG,CAACO,GAAJ,CAAQ,MAAR,CAAgB,EADlB;AAEzBP,QAAAA,GAFyB;AAGzBE,QAAAA,IAHyB;AAIzBM,QAAAA,MAAM,EAAER,GAAG,CAACQ,MAJa;AAKzBC,QAAAA,KAAK,EAAET,GAAG,CAACS,KALc;AAMzBC,QAAAA,IAAI,EAAEV,GAAG,CAACU,IANe;AAOzB9B,QAAAA,UAAU,EAAE,KAAKA,UAPQ;AAQzBE,QAAAA,SAAS,EAAE,KAAKA,SARS;AASzBD,QAAAA,MAAM,EAAE,KAAKA,MATY;AAUzB8B,QAAAA,YAAY,EAAE,IAAIC,qBAAJ,EAVW;AAWzB1B,QAAAA,KAAK,EAAE,KAAKA,KAXa;AAYzB2B,QAAAA,IAAI,EAAE,CAACC,UAAD,EAAaC,QAAb,EAAuBC,QAAvB,KAAoC;AACxC,cAAIA,QAAJ,EAAc;AACZf,YAAAA,GAAG,CAACe,QAAJ,CAAaA,QAAb;AACD;;AACDf,UAAAA,GAAG,CAACgB,MAAJ,CAAWH,UAAX,EAAuBI,IAAvB,CAA4BH,QAA5B;AACD;AAjBwB,OAApB,CAAP;AAmBD;;;0BAEK;AACJ,WAAKnC,UAAL,CAAgBuC,oBAAhB,CAAqC,KAAKtC,MAA1C;AACA,WAAKF,MAAL,CAAYyC,cAAZ,CAA2B,KAAKrC,gBAAhC,EAAkD,KAAKE,oBAAvD;AACD;;;;;;eAGYP,I","sourcesContent":["import redis from 'redis';\n\nimport URIGenerator from 'utils/uriGenerator';\nimport constants from 'config/constants';\nimport logger from 'utils/logger';\n\nclass Boot {\n  constructor(router, repository) {\n    this.router = router;\n    this.repository = repository;\n    this.logger = logger;\n    this.constants = constants;\n    this.appRegisterRoute = this.appRegisterRoute.bind(this);\n    this.appCreateRouteAction = this.appCreateRouteAction.bind(this);\n    this.redis = redis.createClient({ host: 'redis-server', port: process.env.REDIS_PORT || 6379 });\n  }\n\n  appRegisterRoute(uri, httpMethod, boundAction) {\n    throw new Error('Not Implemented Exception');\n  }\n\n  appCreateRouteAction(controllerClass, method) {\n    const result = [\n      (req, res, next) => {\n        this.buildControllerInstance(controllerClass, req, res, next)[method](req, res, next);\n      },\n    ];\n\n    return result;\n  }\n\n  buildControllerInstance(ControllerClass, req, res, next) {\n    return new ControllerClass({\n      base: `${req.protocol}://${req.get('host')}`,\n      req,\n      next,\n      params: req.params,\n      query: req.query,\n      body: req.body,\n      repository: this.repository,\n      constants: this.constants,\n      logger: this.logger,\n      uriGenerator: new URIGenerator(),\n      redis: this.redis,\n      send: (statusCode, resource, location) => {\n        if (location) {\n          res.location(location);\n        }\n        res.status(statusCode).json(resource);\n      },\n    });\n  }\n\n  run() {\n    this.repository.registerRepositories(this.logger);\n    this.router.registerRoutes(this.appRegisterRoute, this.appCreateRouteAction);\n  }\n}\n\nexport default Boot;\n"],"file":"boot.js"}