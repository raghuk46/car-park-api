{"version":3,"sources":["../../src/controllers/ParkingController.js"],"names":["ParkingController","response","repository","parking","getTotalSlots","redis","ok","err","error","totalSlots","body","totalSlotsSchema","validateAsync","updateSlots","errorResponse","details","getAvailablefreeSlots","parkingSchema","parkCar","slotId","params","unparkSchema","unparkCar","type","query","typeSchema","getAllByType","console","log","plateNo","plateNoSchema","BaseController"],"mappings":";;;;;;;AAAA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;IAQMA,iB;;;;;;;;;;;;;0CACkB;AACpB,UAAI;AACF,cAAMC,QAAQ,GAAG,MAAM,KAAKC,UAAL,CAAgBC,OAAhB,CAAwBC,aAAxB,CAAsC,KAAKC,KAA3C,CAAvB;AAEA,aAAKC,EAAL,CAAQL,QAAR;AACD,OAJD,CAIE,OAAOM,GAAP,EAAY;AACZ,aAAKC,KAAL,CAAWD,GAAX;AACD;AACF;;;0CAEqB;AACpB,UAAI;AACF,cAAM;AAAEE,UAAAA;AAAF,YAAiB,KAAKC,IAA5B;AAEA,cAAMC,8BAAiBC,aAAjB,CAA+B,KAAKF,IAApC,CAAN;AAEA,cAAMT,QAAQ,GAAG,MAAM,KAAKC,UAAL,CAAgBC,OAAhB,CAAwBU,WAAxB,CAAoCJ,UAApC,EAAgD,KAAKJ,KAArD,CAAvB;AAEA,aAAKC,EAAL,CAAQL,QAAR;AACD,OARD,CAQE,OAAOM,GAAP,EAAY;AACZ,aAAKO,aAAL,CAAmB,GAAnB,EAAwB,sBAAxB,EAAgDP,GAAG,CAACQ,OAApD;AACD;AACF;;;kDAE6B;AAC5B,UAAI;AACF,cAAMd,QAAQ,GAAG,MAAM,KAAKC,UAAL,CAAgBC,OAAhB,CAAwBa,qBAAxB,CAA8C,KAAKX,KAAnD,CAAvB;AAEA,aAAKC,EAAL,CAAQL,QAAR;AACD,OAJD,CAIE,OAAOM,GAAP,EAAY;AACZ,aAAKC,KAAL,CAAWD,GAAX;AACD;AACF;;;oCAEe;AACd,UAAI;AACF,cAAMU,2BAAcL,aAAd,CAA4B,KAAKF,IAAjC,CAAN;AAEA,cAAMT,QAAQ,GAAG,MAAM,KAAKC,UAAL,CAAgBC,OAAhB,CAAwBe,OAAxB,CAAgC,KAAKR,IAArC,EAA2C,KAAKL,KAAhD,CAAvB;AAEA,aAAKC,EAAL,CAAQL,QAAR;AACD,OAND,CAME,OAAOM,GAAP,EAAY;AACZ,aAAKO,aAAL,CAAmB,GAAnB,EAAwB,sBAAxB,EAAgDP,GAAG,CAACQ,OAApD;AACD;AACF;;;sCAEiB;AAChB,UAAI;AACF,cAAM;AAAEI,UAAAA;AAAF,YAAa,KAAKC,MAAxB;AACA,cAAMC,0BAAaT,aAAb,CAA2B,KAAKQ,MAAhC,CAAN;AAEA,cAAMnB,QAAQ,GAAG,MAAM,KAAKC,UAAL,CAAgBC,OAAhB,CAAwBmB,SAAxB,CAAkCH,MAAlC,EAA0C,KAAKd,KAA/C,CAAvB;AAEA,aAAKC,EAAL,CAAQL,QAAR;AACD,OAPD,CAOE,OAAOM,GAAP,EAAY;AACZ,aAAKO,aAAL,CAAmB,GAAnB,EAAwB,sBAAxB,EAAgDP,GAAG,CAACQ,OAApD;AACD;AACF;;;0CAEqB;AACpB,UAAI;AACF,cAAM;AAAEQ,UAAAA;AAAF,YAAW,KAAKC,KAAtB;AAEA,cAAMC,wBAAWb,aAAX,CAAyB,KAAKY,KAA9B,CAAN;AAEA,cAAMvB,QAAQ,GAAG,MAAM,KAAKC,UAAL,CAAgBC,OAAhB,CAAwBuB,YAAxB,CAAqCH,IAArC,EAA2C,MAA3C,CAAvB;AAEA,aAAKjB,EAAL,CAAQL,QAAR;AACD,OARD,CAQE,OAAOM,GAAP,EAAY;AACZoB,QAAAA,OAAO,CAACC,GAAR,CAAYrB,GAAZ;AACA,aAAKO,aAAL,CAAmB,GAAnB,EAAwB,sBAAxB,EAAgDP,GAAG,CAACQ,OAApD;AACD;AACF;;;uCAEkB;AACjB,UAAI;AACF,cAAM;AAAEc,UAAAA;AAAF,YAAc,KAAKL,KAAzB;AACA,cAAMM,2BAAclB,aAAd,CAA4B,KAAKY,KAAjC,CAAN;AACA,cAAMvB,QAAQ,GAAG,MAAM,KAAKC,UAAL,CAAgBC,OAAhB,CAAwBuB,YAAxB,CAAqCG,OAArC,EAA8C,SAA9C,CAAvB;AACA,aAAKvB,EAAL,CAAQL,QAAR;AACD,OALD,CAKE,OAAOM,GAAP,EAAY;AACZ,aAAKO,aAAL,CAAmB,GAAnB,EAAwB,sBAAxB,EAAgDP,GAAG,CAACQ,OAApD;AACD;AACF;;;;EApF6BgB,wB;;eAuFjB/B,iB","sourcesContent":["import BaseController from './BaseController';\n\nimport {\n  totalSlotsSchema,\n  parkingSchema,\n  unparkSchema,\n  typeSchema,\n  plateNoSchema,\n} from 'helpers/validations';\n\nclass ParkingController extends BaseController {\n  async getTotalSlots() {\n    try {\n      const response = await this.repository.parking.getTotalSlots(this.redis);\n\n      this.ok(response);\n    } catch (err) {\n      this.error(err);\n    }\n  }\n\n  async setTotalSlots() {\n    try {\n      const { totalSlots } = this.body;\n\n      await totalSlotsSchema.validateAsync(this.body);\n\n      const response = await this.repository.parking.updateSlots(totalSlots, this.redis);\n\n      this.ok(response);\n    } catch (err) {\n      this.errorResponse(422, 'Unprocessible Entity', err.details);\n    }\n  }\n\n  async getAvailablefreeSlots() {\n    try {\n      const response = await this.repository.parking.getAvailablefreeSlots(this.redis);\n\n      this.ok(response);\n    } catch (err) {\n      this.error(err);\n    }\n  }\n\n  async parkCar() {\n    try {\n      await parkingSchema.validateAsync(this.body);\n\n      const response = await this.repository.parking.parkCar(this.body, this.redis);\n\n      this.ok(response);\n    } catch (err) {\n      this.errorResponse(422, 'Unprocessible Entity', err.details);\n    }\n  }\n\n  async unparkCar() {\n    try {\n      const { slotId } = this.params;\n      await unparkSchema.validateAsync(this.params);\n\n      const response = await this.repository.parking.unparkCar(slotId, this.redis);\n\n      this.ok(response);\n    } catch (err) {\n      this.errorResponse(422, 'Unprocessible Entity', err.details);\n    }\n  }\n\n  async getCarsByType() {\n    try {\n      const { type } = this.query;\n\n      await typeSchema.validateAsync(this.query);\n\n      const response = await this.repository.parking.getAllByType(type, 'type');\n\n      this.ok(response);\n    } catch (err) {\n      console.log(err);\n      this.errorResponse(422, 'Unprocessible Entity', err.details);\n    }\n  }\n\n  async getCarByNo() {\n    try {\n      const { plateNo } = this.query;\n      await plateNoSchema.validateAsync(this.query);\n      const response = await this.repository.parking.getAllByType(plateNo, 'plateNo');\n      this.ok(response);\n    } catch (err) {\n      this.errorResponse(422, 'Unprocessible Entity', err.details);\n    }\n  }\n}\n\nexport default ParkingController;\n"],"file":"ParkingController.js"}